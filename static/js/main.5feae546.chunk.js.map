{"version":3,"sources":["components/Header/index.js","components/EmployeeList/randomUserAPI.js","components/Employee/index.js","components/StateSelect/index.js","components/SortButton/index.js","components/EmployeeList/index.js","App.js","index.js"],"names":["Header","className","count","a","apiURL","fetch","then","response","json","users","results","map","user","firstName","name","first","lastName","last","state","location","email","phone","id","login","uuid","randomUsers","Employee","props","data","StateSelect","stateList","forEach","employee","includes","push","sort","unshift","onChange","changeFunction","SortButton","style","width","onClick","disabled","sortOrder","renderArrow","EmployeeList","employees","nameSortOrder","stateSortOrder","stateFilter","nameFilter","sortByName","event","preventDefault","sorted","b","nameA","toUpperCase","nameB","newSortOrder","reverse","setState","sortByState","stateA","stateB","handleFormChange","target","value","trim","checkFilter","filtered","this","scope","autocomplete","placeholder","filter","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5feae546.chunk.js","sourcesContent":["import \"./style.css\"\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"jumbotron directory-head\">\r\n      <h1 className=\"text-center\">Random Inc.</h1>\r\n      <h3 className=\"text-center\">Employee Directory</h3>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","/* Returns an array of random user data */\r\nasync function randomUsers(count) {\r\n  const apiURL = \"https://randomuser.me/api/?nat=us&results=\" + count;\r\n  const users = await fetch(apiURL)\r\n    .then(response => response.json())\r\n    .then(users => users.results.map(user => {\r\n      return {\r\n        firstName: user.name.first,\r\n        lastName: user.name.last,\r\n        state: user.location.state,\r\n        email: user.email,\r\n        phone: user.phone,\r\n        id: user.login.uuid\r\n      }\r\n    }\r\n    ));\r\n\r\n  return users;\r\n}\r\n\r\nexport default randomUsers;\r\n\r\n","function Employee(props) {\r\n  return (\r\n    <tr>\r\n      <td>{props.data.lastName}, {props.data.firstName}</td>\r\n      <td>{props.data.state}</td>\r\n      <td>{props.data.email}</td>\r\n      <td>{props.data.phone}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Employee;","function StateSelect(props) {\r\n  let stateList = [];\r\n\r\n  props.data.forEach(employee => {\r\n    if (!stateList.includes(employee.state)) {\r\n      stateList.push(employee.state);\r\n    }\r\n  });\r\n\r\n  stateList.sort();\r\n  stateList.unshift(\"All\");\r\n\r\n  return (\r\n    <select className=\"custom-select custom-select-sm\" name={props.name} onChange={props.changeFunction}>\r\n      {stateList.map(state => (\r\n        <option key={state}>{state}</option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default StateSelect;","function SortButton(props) {\r\n\r\n  const renderArrow = sortOrder => {\r\n    switch (props.sortOrder) {\r\n      case \"Forward\": return \"↓\";\r\n      case \"Reverse\": return \"↑\";\r\n      default: return \"\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <button className=\"btn btn-sm btn-secondary mr-2\" style={{ width: \"3.5rem\" }} onClick={props.onClick} disabled={props.disabled}>\r\n      Sort {renderArrow(props.sortOrder)}\r\n    </button>\r\n  );\r\n}\r\n\r\n\r\nexport default SortButton;","import React from \"react\"\r\nimport randomUsers from \"./randomUserAPI\"\r\nimport Employee from \"../Employee\"\r\nimport StateSelect from \"../StateSelect\"\r\nimport SortButton from \"../SortButton\"\r\nimport \"./style.css\"\r\n\r\nclass EmployeeList extends React.Component {\r\n  state = {\r\n    employees: [],\r\n    nameSortOrder: \"None\",\r\n    stateSortOrder: \"None\",\r\n    stateFilter: \"All\",\r\n    nameFilter: \"\"\r\n  }\r\n\r\n  /* Construct the list of employees on component mount */\r\n  componentDidMount() {\r\n    randomUsers(this.props.count)\r\n      .then(users => {\r\n        this.setState({ employees: users });\r\n      });\r\n  }\r\n\r\n  /* Sorts the employee list by last name */\r\n  sortByName = (event) => {\r\n    event.preventDefault();\r\n\r\n    const sorted = this.state.employees.sort((a, b) => {\r\n      let nameA = a.lastName.toUpperCase();\r\n      let nameB = b.lastName.toUpperCase();\r\n      if (nameA < nameB) {\r\n        return -1;\r\n      }\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n    let newSortOrder = \"Forward\";\r\n\r\n    /* Toggles sort order if used several times */\r\n    if (this.state.nameSortOrder === \"Forward\") {\r\n      newSortOrder = \"Reverse\";\r\n      sorted.reverse();\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        employees: sorted,\r\n        nameSortOrder: newSortOrder,\r\n        stateSortOrder: \"None\"\r\n      }\r\n    );\r\n  }\r\n\r\n  /* Sorts the employee list by state */\r\n  sortByState = (event) => {\r\n    event.preventDefault();\r\n    const sorted = this.state.employees.sort((a, b) => {\r\n      let stateA = a.state.toUpperCase();\r\n      let stateB = b.state.toUpperCase();\r\n      if (stateA < stateB) {\r\n        return -1;\r\n      }\r\n      if (stateA > stateB) {\r\n        return 1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n    let newSortOrder = \"Forward\";\r\n\r\n    /* Toggles sort order if used several times */\r\n    if (this.state.stateSortOrder === \"Forward\") {\r\n      newSortOrder = \"Reverse\";\r\n      sorted.reverse();\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        employees: sorted,\r\n        stateSortOrder: newSortOrder,\r\n        nameSortOrder: \"None\"\r\n      }\r\n    );\r\n  }\r\n\r\n  /* Handles form value change by updating state */\r\n  handleFormChange = (event) => {\r\n    this.setState(\r\n      {\r\n        [event.target.name]: event.target.value.trim()\r\n      }\r\n    );\r\n  }\r\n\r\n  /* Checks the filter on an employee based on whether they match the current criteria */\r\n  checkFilter = employee => {\r\n    let filtered;\r\n\r\n    /* Filter based on state */\r\n    filtered = this.state.stateFilter !== \"All\" && employee.state !== this.state.stateFilter;\r\n\r\n    /* Filter based on name */\r\n    filtered |= !(employee.firstName.toUpperCase().includes(this.state.nameFilter.toUpperCase())\r\n      || employee.lastName.toUpperCase().includes(this.state.nameFilter.toUpperCase()));\r\n\r\n    return !filtered;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"container\">\r\n        <table className=\"table custom-striped\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">\r\n                <form className=\"form-inline\" autocomplete=\"off\">\r\n                  <label className=\"mr-2\">Name</label>\r\n                  <SortButton onClick={this.sortByName} disabled={false} sortOrder={this.state.nameSortOrder} />\r\n                  <input className=\"form-control form-control-sm\" name=\"nameFilter\" placeholder=\"Filter\" onChange={this.handleFormChange} />\r\n                </form>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <form className=\"form-inline\">\r\n                  <label className=\"mr-2\">State</label>\r\n                  <SortButton onClick={this.sortByState} disabled={this.state.stateFilter !== \"All\"} sortOrder={this.state.stateSortOrder} />\r\n                  <StateSelect data={this.state.employees} name=\"stateFilter\" changeFunction={this.handleFormChange} />\r\n                </form>\r\n              </th>\r\n              <th scope=\"col\">Email</th>\r\n              <th scope=\"col\">Phone</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.employees\r\n              .filter(employee => this.checkFilter(employee))\r\n              .map(employee => (\r\n                <Employee key={employee.id} data={employee} />\r\n              ))\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeeList;","import Header from \"./components/Header\"\nimport EmployeeList from \"./components/EmployeeList\"\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <EmployeeList count={20} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}